{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Isolation",
    "coa": {
        "data": {
            "description": "Accepts a URL or list of URLs as input. Blocks the given URLs in ZScaler.\n\nhttps://d3fend.mitre.org/technique/d3f:OutboundTrafficFiltering/",
            "edges": [
                {
                    "id": "port_0_to_port_4",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_4_to_port_6",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_7_to_port_1",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_6_to_port_8",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_8_to_port_7",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                }
            ],
            "hash": "ddce2d54e4936120ec7acc772b88f91fab41ec55",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 19.999999999999986,
                    "y": -6.394884621840902e-14
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 19.999999999999986,
                    "y": 864
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "url input filter",
                            "customNameId": 0,
                            "delimiter": ",",
                            "delimiter_enabled": true,
                            "description": "Determine branches based on provided inputs.",
                            "join": [],
                            "note": "Determine branches based on provided inputs."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "playbook_input:input_url",
                                        "value": "None"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "input_url",
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "url_input_filter",
                        "id": "4",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "filter",
                    "warnings": {},
                    "x": 60,
                    "y": 148
                },
                "6": {
                    "data": {
                        "action": "block url",
                        "actionType": "contain",
                        "advanced": {
                            "customName": "block url",
                            "customNameId": 0,
                            "description": "Block urls in ZScaler based on given urls. ",
                            "join": [],
                            "note": "Block urls in ZScaler based on given urls. "
                        },
                        "connector": "Zscaler",
                        "connectorConfigs": [
                            "zscaler"
                        ],
                        "connectorId": "ee475421-d2e4-4d8e-addb-a2ce1465d6a3",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "block_url",
                        "id": "6",
                        "parameters": {
                            "url": "filtered-data:url_input_filter:condition_1:playbook_input:input_url"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "url"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "action",
                    "warnings": {},
                    "x": 0,
                    "y": 328
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "build observable",
                            "customNameId": 0,
                            "description": "This block uses custom code to generate an observable dictionary to output into the observables data path.",
                            "join": [],
                            "note": "This block uses custom code to generate an observable dictionary to output into the observables data path."
                        },
                        "functionId": 1,
                        "functionName": "build_observable",
                        "id": "7",
                        "inputParameters": [
                            "block_url:action_result.summary",
                            "block_url:action_result.status",
                            "block_url:action_result.message",
                            "filtered-data:url_input_filter:condition_1:playbook_input:input_url"
                        ],
                        "outputVariables": [
                            "observable_array"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "code",
                    "userCode": "\n    build_observable__observable_array = list()\n    for summary, status, message, url in zip(block_url_result_item_0, block_url_result_item_1, block_url_result_message, filtered_input_0_input_url_values):\n        observable = {\n            \"type\": \"url\",\n            \"value\": url,\n            \"source\": \"ZScaler\"\n        }\n        if len(summary[\"ignored\"]) > 0:\n            observable[\"status\"] = \"ignored\"\n        else:\n            observable[\"status\"] = \"updated\"\n            \n        build_observable__observable_array.append(observable)\n        \n\n",
                    "warnings": {},
                    "x": 0,
                    "y": 700
                },
                "8": {
                    "data": {
                        "advanced": {
                            "customName": "block url success filter",
                            "customNameId": 0,
                            "delimiter": ",",
                            "delimiter_enabled": true,
                            "description": "Determine if the block url action was successful or not.",
                            "join": [],
                            "note": "Determine if the block url action was successful or not."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "block_url:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "success",
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "block_url_success_filter",
                        "id": "8",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "filter",
                    "warnings": {},
                    "x": 60,
                    "y": 506
                }
            },
            "notes": "Inputs: url\nInteractions: ZScaler\nActions: block url\nOutputs: observables"
        },
        "input_spec": [
            {
                "contains": [
                    "url"
                ],
                "description": "Accepts url and block them",
                "name": "input_url"
            }
        ],
        "output_spec": [
            {
                "contains": [
                    "url"
                ],
                "datapaths": [
                    "build_observable:custom_function:observable_array"
                ],
                "deduplicate": false,
                "description": "An array of observable dictionaries with value, type and information about the blocked urls.",
                "metadata": {},
                "name": "observable"
            }
        ],
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.10",
        "version": "6.0.1.123902"
    },
    "create_time": "2023-06-21T09:27:47.392005+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": [
        "url",
        "D3-OTF",
        "ZScaler",
        "denylist"
    ]
}