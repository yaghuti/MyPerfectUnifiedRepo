name: GPUpdate with no Command Line Arguments with Network
id: 2c853856-a140-11eb-a5b5-acde48001122
version: 11
date: '2025-05-02'
author: Michael Haag, Splunk
status: production
type: TTP
description: The following analytic detects the execution of gpupdate.exe without
  command line arguments and with an active network connection. This behavior is identified
  using Endpoint Detection and Response (EDR) telemetry, focusing on process execution
  and network traffic data. It is significant because gpupdate.exe typically runs
  with specific arguments, and its execution without them, especially with network
  activity, is often associated with malicious software like Cobalt Strike. If confirmed
  malicious, this activity could indicate an attacker leveraging gpupdate.exe for
  lateral movement, command and control, or other nefarious purposes, potentially
  leading to system compromise.
data_source:
- Sysmon EventID 1 AND Sysmon EventID 3
search: '| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes
  where Processes.process_name=gpupdate.exe 
  by Processes.action Processes.dest Processes.original_file_name Processes.parent_process Processes.parent_process_exec 
  Processes.parent_process_guid Processes.parent_process_id Processes.parent_process_name 
  Processes.parent_process_path Processes.process Processes.process_exec Processes.process_guid Processes.process_hash 
  Processes.process_id Processes.process_integrity_level Processes.process_name Processes.process_path 
  Processes.user Processes.user_id Processes.vendor_product 
  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`
  | `security_content_ctime(lastTime)` | regex process="(?i)(gpupdate\.exe.{0,4}$)"|
  join  process_id [| tstats `security_content_summariesonly` count values(All_Traffic.app) as app values(All_Traffic.dest_ip) as dest_ip 
  values(All_Traffic.direction) as direction values(All_Traffic.dvc) as dvc values(All_Traffic.protocol) as protocol 
  values(All_Traffic.protocol_version) as protocol_version values(All_Traffic.src) as src values(All_Traffic.src_ip) as src_ip 
  values(All_Traffic.src_port) as src_port values(All_Traffic.transport) as transport FROM datamodel=Network_Traffic.All_Traffic
  where All_Traffic.dest_port != 0 by All_Traffic.process_id All_Traffic.dest All_Traffic.dest_port
  | `drop_dm_object_name(All_Traffic)` | rename dest as C2 ] | table _time user dest
  parent_process_name process_name process_path process process_id dest_port C2 app dest_ip direction dvc protocol 
  protocol_version src src_ip src_port transport |
  `gpupdate_with_no_command_line_arguments_with_network_filter`'
how_to_implement: The detection is based on data that originates from Endpoint Detection
  and Response (EDR) agents. These agents are designed to provide security-related
  telemetry from the endpoints where the agent is installed. To implement this search,
  you must ingest logs that contain the process GUID, process name, and parent process.
  Additionally, you must ingest complete command-line executions. These logs must
  be processed using the appropriate Splunk Technology Add-ons that are specific to
  the EDR product. The logs must also be mapped to the `Processes` node of the `Endpoint`
  data model. Use the Splunk Common Information Model (CIM) to normalize the field
  names and speed up the data modeling process.
known_false_positives: Limited false positives may be present in small environments.
  Tuning may be required based on parent process.
references:
- https://raw.githubusercontent.com/xx0hcd/Malleable-C2-Profiles/0ef8cf4556e26f6d4190c56ba697c2159faa5822/crimeware/trick_ryuk.profile
- https://www.cobaltstrike.com/blog/learn-pipe-fitting-for-all-of-your-offense-projects/
drilldown_searches:
- name: View the detection results for - "$user$" and "$dest$"
  search: '%original_detection_search% | search  user = "$user$" dest = "$dest$"'
  earliest_offset: $info_min_time$
  latest_offset: $info_max_time$
- name: View risk events for the last 7 days for - "$user$" and "$dest$"
  search: '| from datamodel Risk.All_Risk | search normalized_risk_object IN ("$user$",
    "$dest$") starthoursago=168  | stats count min(_time) as firstTime max(_time)
    as lastTime values(search_name) as "Search Name" values(risk_message) as "Risk
    Message" values(analyticstories) as "Analytic Stories" values(annotations._all)
    as "Annotations" values(annotations.mitre_attack.mitre_tactic) as "ATT&CK Tactics"
    by normalized_risk_object | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`'
  earliest_offset: $info_min_time$
  latest_offset: $info_max_time$
rba:
  message: Process gpupdate.exe with parent_process $parent_process_name$ is executed
    on $dest$ by user $user$, followed by an outbound network connection on port $dest_port$.
    This behaviour is seen with cobaltstrike.
  risk_objects:
  - field: user
    type: user
    score: 81
  - field: dest
    type: system
    score: 81
  threat_objects:
  - field: parent_process_name
    type: parent_process_name
tags:
  analytic_story:
  - Graceful Wipe Out Attack
  - Cobalt Strike
  - Compromised Windows Host
  - BlackByte Ransomware
  asset_type: Endpoint
  mitre_attack_id:
  - T1055
  product:
  - Splunk Enterprise
  - Splunk Enterprise Security
  - Splunk Cloud
  security_domain: endpoint
tests:
- name: True Positive Test
  attack_data:
  - data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon.log
    source: XmlWinEventLog:Microsoft-Windows-Sysmon/Operational
    sourcetype: XmlWinEventLog
